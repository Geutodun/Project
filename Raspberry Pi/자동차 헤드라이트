#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/mman.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>

#include "gpiolib.c"

#define BH1750_ADDR 0x23

int ledControl(int gpio, int onOff)
{
	int fd;
	char buf[128];

	gpioExport(gpio);

	gpioDirection(gpio, 1); // "out"

	gpioWrite(gpio, onOff);

	gpioUnexport(gpio);

	return 0;
}



int BH()
{
	int fd;
	int     luxRaw;
	float   lux;
	unsigned char buf[3] = { 0 };

	if ((fd = open("/dev/i2c-1", O_RDWR)) < 0) { // Open the I2C device file
		perror("open");
		exit(1);
	}

	if (ioctl(fd, I2C_SLAVE, BH1750_ADDR) < 0) { // Set the I2C slave address
		perror("ioctl");
		exit(1);
	}


	// Send measurement request to the sensor
	//buf[0] = 0x01; // Power On
	//buf[0] = 0x07; // Reset
	buf[0] = 0x23; // One time L-Resolution measurement
	if (write(fd, buf, 1) != 1) {
		perror("write");
		exit(1);
	}

	// Wait for measurement to be ready (typically takes 120ms)
	usleep(120000);

	// Read the measurement value from the sensor
	if (read(fd, buf, 2) != 2) {
		perror("read");
		exit(1);
	}

	// Convert the measurement value to lux
	luxRaw = (buf[0] << 8) | buf[1];
	lux = (float)luxRaw / 1.2; // Divide by 1.2 to get the actual lux value

	printf("Lux: %d(%7.3f) :: %d, %d\n", luxRaw, lux, buf[0], buf[1]);

	close(fd);
	int b = buf[1];
	close(fd);
	return b;

}

int ledSW_Control(int gpio, int onOff)
{
	int fd;
	char buf[128];
	char inCh;

	gpioExport(gpio);

	gpioDirection(gpio, 0); // "in"
	int x = 0;
	while (1) {
		if ((gpioRead(gpio) == 0) && (x == 0))
		{
			x = 1;
			usleep(1000000);
		}


		if (x == 1)
		{
			int a = BH();
			if (a < 10)
			{
				ledControl(20, 1);
			}
			else
			{
				ledControl(20, 0);
			}
			
		}

		if ((gpioRead(gpio) == 0) && (x == 1))
		{
			x = 0;
			ledControl(20, 0);
			usleep(1000000);
		}

	}

	gpioUnexport(gpio);

	return 0;
}

int main()
{
	printf("Start Led SW !!!\n");
	ledSW_Control(21, 0);

	return 0;
}
